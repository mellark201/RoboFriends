{"version":3,"sources":["Card.js","CardList.js","SearchBox.js","Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","props","name","email","id","className","src","alt","CardList","robot","cardComponent","map","user","i","key","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","onSearchChange","event","setState","target","value","console","log","state","robots","fetch","then","response","json","users","filteredRobots","this","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qOAiBeA,G,MAbF,SAACC,GAAW,IACjBC,EAAmBD,EAAnBC,KAAMC,EAAaF,EAAbE,MAAOC,EAAMH,EAANG,GACpB,OACC,yBAAKC,UAAU,wDACd,yBAAKC,IAAG,8BAAyBF,EAAzB,YAAuCG,IAAI,UACnD,6BACC,4BAAKL,GACL,2BAAIC,OCSOK,EAjBE,SAAC,GAAa,IAAZC,EAAW,EAAXA,MACZC,EAAgBD,EAAME,KAAI,SAACC,EAAMC,GACtC,OACA,kBAAC,EAAD,CACCC,IAAKD,EACLT,GAAIK,EAAMI,GAAGT,GACbF,KAAMO,EAAMI,GAAGX,KACfC,MAAOM,EAAMI,GAAGV,WAGlB,OACC,6BACEO,EADF,MCGaK,EAdG,SAAC,GACnB,EADoBC,YACnB,IADgCC,EACjC,EADiCA,aAEhC,OACC,yBAAKZ,UAAU,OACd,2BACCA,UAAY,qBACZa,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCDDI,EARA,SAACpB,GACf,OACC,yBAAKqB,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAS,UACpExB,EAAMyB,WCiDKC,E,YA1Cd,aACC,IAAD,8BACC,+CAiBDC,eAAiB,SAACC,GAEjB,EAAKC,SAAS,CAAEd,YAAca,EAAME,OAAOC,QAC3CC,QAAQC,IAAIL,EAAME,OAAOC,QAnBzB,EAAKG,MAAQ,CACZC,OAAQ,GACRpB,YAAa,IAEdiB,QAAQC,IAAI,KANb,E,iFASqB,IAAD,OACnBG,MAAM,8CACLC,MAAK,SAAAC,GACL,OAAOA,EAASC,UAEhBF,MAAK,SAAAG,GACL,EAAKX,SAAS,CAAEM,OAAQK,S,+BAShB,IAAD,OACFC,EAAiBC,KAAKR,MAAMC,OAAOQ,QAAO,SAAAnC,GAC/C,OAAOA,EAAMP,KAAK2C,cAAcC,SAAS,EAAKX,MAAMnB,YAAY6B,kBAGjE,OADAZ,QAAQC,IAAI,KAEX,yBAAK7B,UAAU,MACd,2CACA,kBAAC,EAAD,CAAWY,aAAc0B,KAAKf,iBAC9B,kBAAC,EAAD,KACC,kBAAC,EAAD,CAAUnB,MAAOiC,U,GArCJK,aCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,MAAK,SAAAsB,GACjCA,EAAaC,iB","file":"static/js/main.e86dd86b.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Card.css';\r\n\r\n\r\nconst Card = (props) => {\r\n\tconst {name, email, id} = props;\r\n\treturn (\r\n\t\t<div className='tc bg-light-green dib bw2 shadow-5 br3 pa0 na10 grow'>\r\n\t\t\t<img src={`http://robohash.org/${id}?500X500`} alt='photo' />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robot}) => {\r\n\tconst cardComponent = robot.map((user, i) => {\r\n\t\treturn (\r\n\t\t<Card \r\n\t\t\tkey={i} \r\n\t\t\tid={robot[i].id} \r\n\t\t\tname={robot[i].name} \r\n\t\t\temail={robot[i].email}\r\n\t\t/>);\r\n\t})\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t{cardComponent};\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\n\r\nconst SearchBox = ({searchField, searchChange}) =>\r\n{\r\n\treturn (\r\n\t\t<div className=\"pa2\">\r\n\t\t\t<input\r\n\t\t\t\tclassName = \"pa3 tc ba b--green\"\r\n\t\t\t\ttype=\"search\"\r\n\t\t\t\tplaceholder=\"search robots\"\r\n\t\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '1px solid black', height : '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from './CardList';\r\nimport SearchBox from './SearchBox';\r\nimport Scroll from './Scroll';\r\n\r\nconst state = {\r\n\trobot: [],\r\n\tsearchField: '',\r\n};\r\n\r\nclass App extends Component\r\n{\r\n\tconstructor()\r\n\t{\r\n\t\tsuper();\r\n\t\tthis.state = {\r\n\t\t\trobots: [],\r\n\t\t\tsearchField: '',\r\n\t\t}\r\n\t\tconsole.log('1');\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response => {\r\n\t\t\treturn response.json();\r\n\t\t})\r\n\t\t.then(users => {\r\n\t\t\tthis.setState({ robots: users});\r\n\t\t})\r\n\t}\r\n\tonSearchChange = (event) =>\r\n\t{\r\n\t\tthis.setState({ searchField : event.target.value})\r\n\t\tconsole.log(event.target.value);\r\n\t}\r\n\r\n\trender() {\r\n\t\tconst filteredRobots = this.state.robots.filter(robot => {\r\n\t\t\treturn robot.name.toLowerCase().includes(this.state.searchField.toLowerCase());\r\n\t\t})\r\n\t\tconsole.log('3');\r\n\t\treturn (\r\n\t\t\t<div className='tc'>\r\n\t\t\t\t<h1>RoboFriends</h1>\r\n\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t<Scroll>\r\n\t\t\t\t\t<CardList robot={filteredRobots}/>\r\n\t\t\t\t</Scroll>\r\n\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport 'tachyons';\nimport App from './App.js';\nimport { robot } from './robot';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}